{"tagline":"","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"Underscore  [![Build Status](https://secure.travis-ci.org/Doboy/Underscore.png?branch=master)](http://travis-ci.org/Doboy/Underscore)\r\n==========\r\nObfuscating code by changing the variable names to underscores\r\n\r\n## Example\r\n\r\n###### Input\r\n```python\r\n# fib.py\r\n\r\nfrom operator import add\r\n\r\nclass Fibber(object):\r\n    \r\n    @staticmethod\r\n    def fib(n):\r\n        a, b = 0, 1\r\n        for i in xrange(n):\r\n            a, b = b, add(a, b)\r\n        return b\r\n\r\nprint Fibber.fib(10)\r\n```\r\n\r\n###### Output\r\n```python\r\n# _fib.py\r\n\r\n(___________, ____________, _____________) = (0, 1, 10)\r\n(________, _________, __________) = (object, xrange, staticmethod)\r\nfrom operator import add as _\r\n\r\n\r\nclass __(________):\r\n\r\n    @__________\r\n    def ___(____):\r\n        (_____, ______) = (___________, ____________)\r\n        for _______ in _________(____):\r\n            (_____, ______) = (______, _(_____, ______))\r\n        return ______\r\n    (fib,) = (___,)\r\nprint __.fib(_____________)\r\n(Fibber, add) = (__, _)\r\n```\r\n\r\n## Installation\r\n```\r\npip install underscore\r\n```\r\n\r\nSupport for `python2.6` and `python2.7`\r\n\r\n## Usage\r\n```\r\n$ _ file.py > _file.py\r\n```\r\nYou can also compile through python\r\n```python\r\nfrom underscore import _\r\n\r\n_(filename, output_filename)\r\n```\r\n\r\n## Development\r\n##### Setup\r\n```python setup.py develop```\r\n\r\n##### Running Tests\r\n```python setup.py nosetests```\r\n\r\n##### Tests\r\n* `tests/diff_test.py`\r\n  * This test compiles python files in `example/` into `example/underscored` then runs both version to check that their outputs are equivalent.\r\n* `tests/keyword_test.py`\r\n  * This test makes sure that the compiled code does not use `non-underscored` variables where possible\r\n* `tests/meta_test.py` (Not ready yet)\r\n  * This test will turn the source code into underscored code, then with the underscored code we will turn the source code into underscored code again.. and check that the `source` and `output` are the same.. I know mind blowing..\r\n\r\n##### TODO\r\n* Give out warnings if users are using `exec` as this may lead to incorrect behavior.\r\n* Write the `meta_test.py` described above.\r\n","name":"Underscore","google":""}